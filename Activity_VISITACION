---------------------------//[STEP 2]//------------------------
---------------------------------------------------------------

CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	department_id INT,
	salary NUMERIC(10,2),
	hire_date DATE
);

CREATE TABLE departments (
    department_id SERIAL PRIMARY KEY,
	department_name VARCHAR(100)
);

INSERT INTO departments (department_name) VALUES
('HR'), ('IT'), ('Finance'), ('Marketing'), ('Operations');

INSERT INTO employees (first_name, last_name, department_id, salary, hire_date) VALUES 
    ('Alice', 'Johnson', 1, 50000.00, '2020-06-15'),
	('Bob', 'Smith', 2, 70000.00, '2019-03-22'), 
	('Charlie', 'Brown', 3, 65000.00, '2018-07-11'), 
	('David', 'Wilson', 2, 72000.00, '2017-10-30'), 
	('Eve', 'Adams', 4, 55000.00, '2021-01-19'), 
	('Frank', 'Miller', 5, 48000.00, '2018-12-05'), 
	('Grace', 'Taylor', 1, 52000.00, '2019-08-25'), 
	('Hank', 'Anderson', 2, 68000.00, '2020-02-14'), 
	('Ivy', 'Thomas', 3, 66000.00, '2022-05-20'), 
	('Jack', 'White', 4, 53000.00, '2018-09-30'), 
	('Karen', 'Hall', 5, 49000.00, '2023-03-11'), 
	('Leo', 'Harris', 1, 51000.00, '2020-11-23'), 
	('Mona', 'Clark', 2, 71000.00, '2017-06-07'), 
	('Nate', 'Lewis', 3, 64000.00, '2019-04-15'), 
	('Olivia', 'King', 4, 56000.00, '2021-12-01'), 
	('Paul', 'Allen', 5, 47000.00, '2018-07-20'), 
	('Quinn', 'Scott', 1, 53000.00, '2022-09-05'), 
	('Rachel', 'Green', 2, 69000.00, '2016-11-18'), 
	('Steve', 'Martinez', 3, 67000.00, '2017-02-28'), 
	('Tina', 'Roberts', 4, 54000.00, '2019-10-10');


---------------------------//[STEP 3]//------------------------
---------------------------------------------------------------
--------------------------//[EXAMPLE]//------------------------


--------------//[AVERAGE SALARY EACH DEPARTMENT]//-------------
---------------------------------------------------------------

SELECT d.department_name, 
AVG(salary) 
AS avg_salary
FROM employees e
JOIN departments d 
ON e.department_id = d.department_id
GROUP BY department_name;

-------------------------//[ASCENDING]//-----------------------
SELECT first_name,last_name,hire_date
FROM employees
ORDER BY hire_date;

-------------------------//[DECENDING]//-----------------------
SELECT first_name,last_name
FROM employees
ORDER BY salary 
DESC;


-------------------------//[LIMITING]//------------------------
LIMIT 5;

----------//[IT DEPT EMP SALARY GREATER THEN 60000]//----------

SELECT first_name,last_name
FROM employees
WHERE department_id = 2 
AND salary > 60000;


-------//[CONCATINATION OF FIRST NAME AND LAST NAME]//---------

SELECT CONCAT(first_name,' ',last_name) 
AS full_name,salary 
AS monthly_income
FROM employees;


SELECT first_name,last_name,salary
FROM employees
WHERE salary > (
SELECT AVG(salary) 
FROM employees);



-- Explanation of SQL Clauses & Functions 
-- AVG(): Returns the average value of a column. 
-- Example: SELECT AVG(salary) FROM employees; 

-- ASC: Sorts the result in ascending order (default sorting order). 
-- Example: SELECT * FROM employees ORDER BY salary ASC; 

-- DESC: Sorts the result in descending order. 
-- Example: SELECT * FROM employees ORDER BY salary DESC; 

-- AND: Combines multiple conditions in a WHERE clause. 
-- Example: SELECT * FROM employees WHERE salary > 50000 AND 
department_id = 2; 

-- GROUP BY: Groups the result set based on one or more columns, often used 
with aggregate functions. 

-- Example: SELECT department_id, AVG(salary) FROM employees GROUP BY 
department_id; 

-- ORDER BY: Sorts the results based on a specified column. 
-- Example: SELECT * FROM employees ORDER BY hire_date DESC; 

-- AS: Renames a column or table in the query result. 

-- Example: SELECT first_name AS "First Name", last_name AS "Last Name" 
FROM employees; 

-- Explanation of Subqueries & Joins 

-- Subqueries: A subquery is a query within another query. It is used to retrieve 
data that will be used in the main query. 

-- Example: Finding employees who earn more than the average salary. 
-- Joins: A JOIN is used to combine data from multiple tables based on a related 
column. 

-- Example: Retrieving employees along with their department names. 

--Provide the query after each given scenario.


---------------------------------------------------------------
---------------------------------------------------------------

------------------------//[ACTIVITY]//-------------------------

--Provide the query after each given scenario. 

-- Activity: Subqueries & Joins 

--------------------------------------------------------------------

-- 1. Retrieve employees who earn more than the average salary 
--------------------------//[query here]//--------------------------
--------------------------------------------------------------------

SELECT first_name,last_name,salary
FROM employees
WHERE salary > (
SELECT AVG(salary) 
FROM employees);
--5pts
--------------------------------------------------------------------

-- 2. Retrieve employees with their department names using a JOIN 
--------------------------//[query here]//-------------------------- 
--------------------------------------------------------------------

SELECT e.first_name, e.last_name, d.department_name
FROM employees e
JOIN departments d 
ON e.department_id = d.department_id;
--5pts

--------------------------------------------------------------------

-- 3. Retrieve employees who joined before a specific employee (e.g., 'Ivy 
'Thomas') 
--------------------------//[query here]//-------------------------- 
--------------------------------------------------------------------

SELECT * FROM employees WHERE hire_date < '2022-05-20';
--5pts
--------------------------------------------------------------------

-- 4. Retrieve the department with the highest average salary using a subquery 
--------------------------//[query here]//-------------------------- 
--------------------------------------------------------------------

SELECT department_name,salary
FROM employees, departments
WHERE salary > (
SELECT AVG(salary) 
FROM employees)
LIMIT 1;
--3pts
--------------------------------------------------------------------

-- 5. Retrieve the total number of employees in each department using a JOIN 
--------------------------//[query here]//-------------------------- 
--------------------------------------------------------------------




--------------------------------------------------------------------



--18
